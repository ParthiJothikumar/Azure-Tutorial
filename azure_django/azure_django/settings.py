"""
Django settings for azure_django project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from urllib.parse import quote_plus
from datetime import timedelta
from dotenv import load_dotenv
import os
from corsheaders.defaults import default_headers

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-$gn9522wpyjrf)5y^!jc%c31onc8^i@-8^6d7*1iv@wqx+9u1k'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# If we want to run our Django Application on any host we need to us "*"
# When we deploy our application to different host it will not throw any error 
# example Host --> Hostinger, Bluehost, GoDaddy
ALLOWED_HOSTS = ["*"]

REST_FRAMEWORK = {
    'DEFAULT_PERMISSIONS_CLASSES': [
        'rest_framework.permissions.IsAuthenticated', 
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
}


# Application definition

INSTALLED_APPS = [
    'blog.apps.BlogConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'azure_django.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        ## In this Path only Django look for the Templates when we declared in outside the app 
        ## It will refer the builded react template
        'DIRS': [os.path.join(BASE_DIR,'frontend/templates')],
        ## If APP_DIRS is True , then Django will also look for a templates/ folder inside each app
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'azure_django.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'sample_db',  # Your database name
        'USER': 'pjpostgresql', 
        'PASSWORD': 'Python@123',
        'HOST': "pj-azure-postgre-database-flexible-server.postgres.database.azure.com",
        'PORT': '5432',
        'OPTIONS': {
            'sslmode': 'require',  # Azure enforces SSL by default
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# If we are using both different endpoints in Front End and Back end
# Like in FE -> localhost:5173, and in Backend -> 127.0.0.0.1
# Then Api will throw CORS(Cors origin) error when we access from FE
# So we need to allow which are the origins fine to access our API endpoint
# Here FE don't need to send the CSRF Token
# So we need to add in CORS_ALLOWED_ORIGINS
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",  # Vite dev server
]

# It will allow all origins to access the API Endpoint
# We should not enable this , when we are sending credientials from Front end
# CORS_ALLOW_ALL_ORIGINS = True

# It will allow credentials to pass in API for all origin
CORS_ALLOW_CREDENTIALS = True

# If we are using both different endpoints in Front End and Back end
# Add If you're using Django sessions for login 
# The cookie won't be sent with requests across these domains
# Login and authenticated requests will fail silently
# If You Don't Set These:
SESSION_COOKIE_SAMESITE = 'None'
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SAMESITE = 'None'
CSRF_COOKIE_SECURE = True

# There are two ways we can use the CSRF_TRUSTED_ORIGINS
# If we are using both different endpoints in Front End and Back end
# 1) When BE needs to send an CSRF token to FE and set that cookie in the frontend domain
# like set the cookie in "localhost:5173", not set the cookie in "127.0.0.0.1:8000"
# 2) And when FE sending an axios request like post, put, delete
# with CSRF token, then also we should add the FE origin in CSRF_TRUSTED_ORIGINS
#“ Here’s a list of websites I trust to talk to my Django app — 
# only if they play by the rules (like sending the CSRF token).”
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:5173",
]



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Were django collects all the static files 
STATICFILES_DIRS = [
    os.path.join(BASE_DIR,'frontend/static')
]

# were django stores all the static files once collect it from STATICFILES_DIRS
STATIC_ROOT = os.path.join(BASE_DIR,'static')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
